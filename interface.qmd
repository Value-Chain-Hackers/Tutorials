
# The Interface: Your Dashboard of Possibilities

When you launch OpenWebUI, the interface is designed to give you full control over the interaction between your agents and their tasks. The layout consists of three main panels: the **left panel** for managing active sessions and templates, the **center panel** for live agent interaction, and the **right panel** for adjusting chat controls and system parameters.

---

### The Left Panel: Your Workspace and Navigation Hub

The **left panel** organizes your active and archived agent interactions. This section allows you to quickly move between different agent conversations and manage templates.

- **Active Sessions**: All active agent conversations are listed here. Click on a session to open and interact with the agent in real time.
- **Archived Conversations**: A space to revisit old conversations with agents, useful for refining agent performance based on previous tasks.
- **Templates**: Pre-configured agents that you can quickly launch, such as a logistics optimizer or NPC for games.

#### Example: Managing Sessions
1. Click on **Active Sessions** to view any agents you have running. For instance, if you have an agent performing a logistics task, you’ll find its current progress and can issue commands directly.
2. To review a past interaction, click on **Archived Conversations** and load up the history of any agent's previous task.
3. If you want to quickly create an agent, click **Templates**, select **Logistics Optimizer**, and watch as the agent template is loaded and ready for interaction.

---

### The Right Panel: Adjusting Chat Controls and System Parameters

The **right panel** is where you can modify the behavior of your agents in real time by setting the **system prompt**, adjusting various **advanced parameters**, and fine-tuning other controls such as temperature or token limits. These settings directly influence how your agent behaves and responds during conversations.

Here’s a breakdown of what each option does:

## System Prompt
The **System Prompt** is the initial instruction or context that guides the agent’s overall behavior. It sets the tone for the agent’s interactions and is one of the most critical settings.

- **Example**: `"You are a logistics optimization agent. Your goal is to minimize delivery time by adjusting routes based on real-time traffic data."`
  
  **Effect**: This ensures the agent’s responses stay focused on optimizing routes. Changing the system prompt to include more detailed instructions, such as considering fuel efficiency or avoiding toll roads, will shift the agent’s decision-making process.

---

## Temperature
**Temperature** controls the randomness or creativity of the agent’s responses. It affects how likely the agent is to deviate from predictable answers.

- **Range**: `0.0` to `1.0`
  - A **lower value** (closer to `0.0`) makes the agent more deterministic, meaning it will choose the most predictable and straightforward responses.
  - A **higher value** (closer to `1.0`) increases the variability in responses, allowing the agent to explore less obvious possibilities.

- **Example**:
  - At **`0.2`**, the agent will give highly predictable and consistent answers. Ideal for tasks like logistics optimization where precision is key.
  - At **`0.8`**, the agent will provide more creative, varied responses, useful when testing dynamic NPC dialogue in games or brainstorming creative solutions.

**Effect**: Higher temperatures introduce more randomness. For a logistics agent, using a high temperature could lead to more unconventional route suggestions, which might not always be optimal. Lowering the temperature ensures the agent sticks to tried-and-tested routes.

---

## Top K
**Top K** limits how many options the agent considers at each step of its response generation. It controls how wide the agent’s "vocabulary" is during interactions.

- **Range**: `1` to infinity (higher values mean more possible words to choose from)
  - A **lower value** (e.g., `10`) restricts the agent to a smaller, more focused set of choices.
  - A **higher value** (e.g., `50`) allows the agent to consider a broader range of possible next words or actions.

- **Example**:
  - Set **Top K** to `10` for a logistics agent. This ensures the agent sticks to the most reliable, often-used routes.
  - Set **Top K** to `100` for an NPC in a game to allow for more varied dialogue options, creating a more dynamic conversation.

**Effect**: Lower **Top K** values make the agent more predictable by narrowing its choices. In logistics, a low **Top K** ensures the agent only considers the most efficient routes. Higher **Top K** values allow the agent to explore more creative options, useful in contexts where variety is desirable.

---

## Top P
**Top P** (nucleus sampling) controls how the agent selects from the top `P%` of most likely responses. This method can reduce reliance on overly common responses.

- **Range**: `0.0` to `1.0`
  - A **lower value** (e.g., `0.1`) means the agent will only select from the top 10% of the most likely responses.
  - A **higher value** (e.g., `0.9`) allows the agent to consider a much broader range of responses.

- **Example**:
  - **Top P** of `0.1` forces the agent to choose the safest, most common responses. Great for logistics where efficiency and reliability are key.
  - **Top P** of `0.8` allows for more variability, letting the agent experiment with routes or responses outside the norm.

**Effect**: Lower **Top P** values restrict the agent to the safest options, which works well for practical applications like logistics. In creative tasks, like generating dialogue for NPCs, a higher **Top P** value might produce more interesting and varied results.

---

## Frequency Penalty
**Frequency Penalty** controls how much the agent penalizes words or phrases that it has already used. This prevents repetitive responses and encourages more varied output.

- **Range**: `0.0` to `2.0`
  - A **higher value** (e.g., `1.5`) makes the agent less likely to repeat words, encouraging it to find new ways of responding.
  - A **lower value** (e.g., `0.2`) allows the agent to repeat words more freely.

- **Example**:
  - Set **Frequency Penalty** to `1.2` for an NPC agent to avoid repetitive dialogue in-game conversations.
  - Set **Frequency Penalty** to `0.5` for a logistics agent, so it can repeat key terms like route names or instructions if necessary for clarity.

**Effect**: A higher penalty is useful in creative tasks to avoid repetitive answers, like generating dynamic NPC dialogue. In logistics or similar applications, setting a lower penalty ensures that important details (like road names) are repeated when necessary.

---

## Max Tokens
**Max Tokens** limits how long the agent's responses can be by setting a cap on the number of tokens (which typically represent words or parts of words).

- **Range**: Any positive integer
  - A **lower value** (e.g., `50`) ensures the agent’s responses are short and concise.
  - A **higher value** (e.g., `200`) allows for more detailed and elaborate responses.

- **Example**:
  - Set **Max Tokens** to `100` for logistics tasks to ensure the agent provides concise but detailed route recommendations.
  - Set **Max Tokens** to `150` for NPC agents in games to allow for more detailed explanations or conversations.

**Effect**: A lower **Max Tokens** value ensures responses remain short and focused, useful for tasks where brevity is important, like logistics. Higher values allow for longer, more elaborate explanations, great for creative writing or character dialogue.

---

## Mirostat (Eta and Tau)
**Mirostat** is an advanced control mechanism that adjusts creativity in real-time as the agent generates text.

- **Eta**: Controls how aggressive the adjustment is.
  - Higher values mean more aggressive changes in creativity.
- **Tau**: The target perplexity, or how unpredictable the agent should be.

- **Example**:
  - Set **Mirostat Eta** to `1.0` and **Mirostat Tau** to `5` for a logistics agent to keep its responses stable and predictable.
  - Increase **Tau** for an NPC agent in a game to make dialogue more varied and unpredictable.

**Effect**: **Mirostat** helps fine-tune the unpredictability in long conversations. In logistics, using a low **Tau** ensures the agent stays consistent over longer interactions, while a higher **Tau** in a game allows for more dynamic and evolving conversations.

---

## Use of Advanced Parameters in Specific Scenarios

### Logistics Use Case:
- **System Prompt**: `"Optimize delivery routes with minimal delays, considering traffic and package urgency."`
- **Temperature**: Set to `0.4` for stable and predictable results.
- **Top K**: Set to `20` to limit route options to the most common choices.
- **Max Tokens**: Set to `100` to keep the responses concise.

### Game NPC Use Case:
- **System Prompt**: `"You are a game character. Respond to player questions with wit and humor."`
- **Temperature**: Set to `0.8` for more creative and spontaneous replies.
- **Frequency Penalty**: Increase to `1.5` to avoid repetition in dialogue.
- **Max Tokens**: Set to `150` for more in-depth interactions.



#### Example: Fine-Tuning a Logistics Agent
Let’s say you have an agent designed to optimize delivery routes, and you want to adjust how it prioritizes efficiency.

1. **System Prompt**: In the **System Prompt** field, type:
   - `"Prioritize optimizing delivery routes based on shortest time while considering real-time traffic delays."`
2. **Temperature**: Set the **Temperature** to `0.5`. This will make the agent’s responses balanced—not too random but still adaptable to complex routing decisions.
3. **Top K & Top P**: Set **Top K** to `50` and **Top P** to `0.9` to allow the agent to consider a wide range of potential routes while still being focused on the most likely options.
4. **Max Tokens**: Set **Max Tokens** to `150` to keep the responses concise but still detailed enough for logistics decisions.
5. **Frequency Penalty**: Increase the **Frequency Penalty** to `0.6` to ensure the agent avoids repeating similar route suggestions over and over.

---

### The Center: Interacting with Agents in Real-Time

The **center panel** is where you have direct conversations with your agents. This panel is where the agent’s responses appear, and you can issue new commands or monitor task progress.

#### Example: Running Your Configured Agent
After adjusting the settings on the right panel, it’s time to see the results in the center panel.

1. In the **center panel**, type:  
   `"Optimize delivery routes for trucks in the downtown area, considering current traffic conditions."`
2. Press **Enter** and observe the agent’s response, which should consider your new system prompt and settings.
3. Simulate a traffic delay by typing:  
   `"There is a traffic jam on Main Street. Recalculate delivery routes."`
4. The agent will adjust the routes in real-time, providing alternative suggestions based on the adjusted parameters like **Temperature** and **Top K**.

